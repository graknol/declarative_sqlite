// Example showing how FilesetField can be integrated into generated data classes
// This would typically be generated by declarative_sqlite_generator

import 'package:declarative_sqlite/declarative_sqlite.dart';

/// Example generated data class showing FilesetField integration.
/// 
/// This demonstrates how fileset columns should be automatically mapped
/// to FilesetField instances when reading from the database.
class DocumentsData {
  const DocumentsData({
    required this.systemId,
    required this.systemVersion,
    required this.id,
    required this.title,
    required this.attachments, // FilesetField type for required fileset
    this.gallery, // FilesetField? type for optional fileset
  });

  final String systemId;
  final String systemVersion;
  final int id;
  final String title;
  final FilesetField attachments;
  final FilesetField? gallery;

  /// Example fromMap method that creates FilesetField instances
  /// from database values using the DeclarativeDatabase instance.
  static DocumentsData fromMap(
    Map<String, dynamic> map,
    DeclarativeDatabase database,
  ) {
    return DocumentsData(
      systemId: map['system_id'] as String,
      systemVersion: map['system_version'] as String,
      id: map['id'] as int,
      title: map['title'] as String,
      // Use DataMappingUtils to create FilesetField from database value
      attachments: DataMappingUtils.filesetFieldFromValue(
        map['attachments'],
        database,
      )!,
      gallery: DataMappingUtils.filesetFieldFromValue(
        map['gallery'],
        database,
      ),
    );
  }

  /// Example toMap method that converts FilesetField instances
  /// back to database values for storage.
  Map<String, dynamic> toMap() {
    return {
      'system_id': systemId,
      'system_version': systemVersion,
      'id': id,
      'title': title,
      // Convert FilesetField back to database value
      'attachments': DataMappingUtils.filesetFieldToValue(attachments),
      'gallery': DataMappingUtils.filesetFieldToValue(gallery),
    };
  }

  @override
  String toString() {
    return 'DocumentsData('
        'systemId: $systemId, '
        'systemVersion: $systemVersion, '
        'id: $id, '
        'title: $title, '
        'attachments: $attachments, '
        'gallery: $gallery'
        ')';
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is DocumentsData &&
        other.systemId == systemId &&
        other.systemVersion == systemVersion &&
        other.id == id &&
        other.title == title &&
        other.attachments == attachments &&
        other.gallery == gallery;
  }

  @override
  int get hashCode {
    return Object.hash(
      systemId,
      systemVersion,
      id,
      title,
      attachments,
      gallery,
    );
  }
}

/// Example usage of the generated data class with FilesetField.
void exampleUsage() async {
  // This example shows how the FilesetField integration would work
  // in practice with a generated data class.
  
  // Assume we have a database and have queried some data
  // final db = ... // DeclarativeDatabase instance
  // final rows = await db.queryTable('documents');
  // final documents = rows.map((row) => DocumentsData.fromMap(row, db)).toList();
  
  // Example working with a document's attachments
  // final document = documents.first;
  
  // Add a new file to the attachments
  // final fileId = await document.attachments.addFile('report.pdf', pdfBytes);
  
  // Get all attached files
  // final allFiles = await document.attachments.getFiles();
  // print('Total attachments: ${allFiles.length}');
  
  // Get file count efficiently
  // final count = await document.attachments.getFileCount();
  // print('File count: $count');
  
  // Remove a file
  // await document.attachments.deleteFile(fileId);
  
  // Handle optional fileset (gallery could be null)
  // if (document.gallery?.hasValue == true) {
  //   final galleryFiles = await document.gallery!.getFiles();
  //   print('Gallery has ${galleryFiles.length} images');
  // }
}