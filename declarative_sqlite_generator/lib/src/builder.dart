import 'dart:async';
import 'dart:convert';

import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';
import 'package:declarative_sqlite/declarative_sqlite.dart';
import 'package:logging/logging.dart';
import 'package:source_gen/source_gen.dart';

import 'registration_aggregator.dart';
import 'registration_scanner.dart';
import 'schema_generator.dart';

/// Step 1: Generate schema cache first
Builder schemaGenerator(BuilderOptions options) =>
    SchemaGeneratorBuilder(options);

/// Step 2: Generate .db.dart files using schema cache
Builder declarativeSqliteGenerator(BuilderOptions options) =>
    PartBuilder([DeclarativeSqliteGenerator(options)], '.db.dart');

/// Step 3: Scan for @GenerateDbRecord annotations
Builder registrationScanner(BuilderOptions options) =>
    RegistrationScanner();

/// Step 4: Aggregate registration info
Builder registrationAggregator(BuilderOptions options) =>
    RegistrationAggregator();

class DeclarativeSqliteGenerator extends GeneratorForAnnotation<GenerateDbRecord> {
  static final _logger = Logger('DeclarativeSqliteGenerator');
  final BuilderOptions options;


  DeclarativeSqliteGenerator(this.options);
  
  @override
  Future<String> generateForAnnotatedElement(
      Element element, ConstantReader annotation, BuildStep buildStep) async {
    _logger.info('=== DeclarativeSqliteGenerator.generateForAnnotatedElement START ===');
    _logger.info('Processing element: ${element.name} (${element.runtimeType})');
    if (element is! ClassElement) {
      throw InvalidGenerationSourceError(
        '`@GenerateDbRecord` can only be used on classes.',
        element: element,
      );
    }

    final buffer = StringBuffer();
    final tableName = annotation.read('tableName').stringValue;
    _logger.info('Extracted table name from annotation: "$tableName"');

    final schema = await _loadCachedSchema(buildStep);
    _logger.info('Schema loaded with ${schema.tables.length} tables: ${schema.tables.map((t) => t.name).join(', ')}');
    
    final table = schema.tables.firstWhere((t) => t.name == tableName,
        orElse: () {
          _logger.severe('Table "$tableName" not found in schema. Available tables: ${schema.tables.map((t) => t.name).join(', ')}');
          throw InvalidGenerationSourceError(
              'Table "$tableName" not found in schema.',
              element: element);
        });
    
    _logger.info('Found table "$tableName" with ${table.columns.length} columns');
    for (final col in table.columns) {
      _logger.fine('  Column: ${col.name} (${col.logicalType}, notNull: ${col.isNotNull})');
    }

    _logger.info('Generating record class...');
    buffer.writeln(_generateRecordClass(element, table));
    buffer.writeln();

    final result = buffer.toString();
    _logger.info('Generated ${result.split('\n').length} lines of code');
    _logger.info('=== DeclarativeSqliteGenerator.generateForAnnotatedElement END ===');
    return result;
  }

  Future<Schema> _loadCachedSchema(BuildStep buildStep) async {
    // Load schema from cache generated by SchemaGenerator
    final cacheAssetId = AssetId(buildStep.inputId.package, 'schema_cache.json');
    
    if (!await buildStep.canRead(cacheAssetId)) {
      throw InvalidGenerationSourceError(
        'Schema cache not found. The schema_generator builder must run first.',
      );
    }

    try {
      final jsonContent = await buildStep.readAsString(cacheAssetId);
      final jsonMap = jsonDecode(jsonContent) as Map<String, dynamic>;
      final schema = Schema.fromJson(jsonMap);
      
      _logger.info('Loaded cached schema with ${schema.tables.length} tables');
      return schema;
    } catch (e, st) {
      _logger.severe('Error loading cached schema: $e\n$st');
      rethrow;
    }
  }

  /// Generates typed properties extension
  String _generateRecordClass(ClassElement element, DbTable schemaTable) {
    final className = element.name;
    _logger.info('Generating record class for $className with table ${schemaTable.name}');
    final buffer = StringBuffer();

    // Generate extension for typed properties
    buffer.writeln('/// Generated typed properties for $className');
    buffer.writeln('extension ${className}Generated on $className {');

    _logger.info('Generating getters and setters for ${schemaTable.columns.length} columns');
    _generateGettersAndSetters(buffer, schemaTable);

    buffer.writeln('}');

    _logger.info('Completed record class generation for $className');
    return buffer.toString();
  }

  /// Generates getters and setters based on the actual schema table
  void _generateGettersAndSetters(StringBuffer buffer, DbTable table) {
    final primaryKeyColumns =
        table.keys.where((k) => k.isPrimary).expand((k) => k.columns).toSet();

    buffer.writeln('  // Generated getters and setters');
    for (final col in table.columns) {
      // Skip system columns - they are managed by the framework, not user code
      if (col.name.startsWith('system_')) {
        continue;
      }

      final propertyName = _camelCase(col.name);
      final dartType = _getDartTypeForColumn(col.logicalType, col.isNotNull);
      final getterMethod =
          _getGetterMethodForColumn(col.logicalType, col.isNotNull);

      buffer.writeln('  /// Gets the ${col.name} column value.');
      buffer.writeln(
          '  $dartType get $propertyName => $getterMethod(\'${col.name}\');');

      // Make properties from primary keys immutable (no setter)
      if (primaryKeyColumns.contains(col.name)) {
        continue;
      }

      // Only generate setters for LWW columns to minimize risk of developers
      // accidentally updating non-LWW columns on server-origin rows
      if (col.isLww) {
        final setterMethod = _getSetterMethodForColumn(col.logicalType);
        buffer.writeln('  /// Sets the ${col.name} column value (LWW column).');
        buffer.writeln(
            '  set $propertyName($dartType value) => $setterMethod(\'${col.name}\', value);');
        buffer.writeln();
      } else {
        buffer.writeln('  /// Note: ${col.name} is not an LWW column, so no setter is generated.');
        buffer.writeln('  /// Use setValue(\'${col.name}\', value) for local-origin rows.');
        buffer.writeln();
      }
    }
  }



  /// Gets the Dart type for a column type
  String _getDartTypeForColumn(String logicalType, bool notNull) {
    final baseType = switch (logicalType) {
      'text' || 'guid' => 'String',
      'integer' => 'int',
      'real' => 'double',
      'date' => 'DateTime',
      'hlc' => 'Hlc',
      'fileset' => 'FilesetField',
      _ => 'Object',
    };

    return notNull ? baseType : '$baseType?';
  }

  /// Gets the getter method name for a column type
  String _getGetterMethodForColumn(String logicalType, bool notNull) {
    return switch (logicalType) {
      'text' || 'guid' => notNull ? 'getTextNotNull' : 'getText',
      'integer' => notNull ? 'getIntegerNotNull' : 'getInteger',
      'real' => notNull ? 'getRealNotNull' : 'getReal',
      'date' => notNull ? 'getDateTimeNotNull' : 'getDateTime',
      'hlc' => notNull ? 'getHlcNotNull' : 'getHlc',
      'fileset' => notNull ? 'getFilesetFieldNotNull' : 'getFilesetField',
      _ => 'getValue',
    };
  }

  /// Gets the setter method name for a column type
  String _getSetterMethodForColumn(String logicalType) {
    return switch (logicalType) {
      'text' || 'guid' => 'setText',
      'integer' => 'setInteger',
      'real' => 'setReal',
      'date' => 'setDateTime',
      'hlc' => 'setHlc',
      'fileset' => 'setFilesetField',
      _ => 'setValue',
    };
  }



  /// Converts snake_case to camelCase
  String _camelCase(String input) {
    final parts = input.split('_');
    if (parts.isEmpty) return input;

    final result = parts[0].toLowerCase() +
        parts.skip(1)
            .map((word) => word.isEmpty ? '' : word[0].toUpperCase() + word.substring(1).toLowerCase())
            .join('');

    return result;
  }
}
