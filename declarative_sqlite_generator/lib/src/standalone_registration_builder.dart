import 'dart:async';

import 'package:analyzer/dart/element/element.dart';
import 'package:build/build.dart';
import 'package:logging/logging.dart';

/// Builder that generates a standalone registration file for all DbRecord classes in a package
class StandaloneRegistrationBuilder implements Builder {
  static final _logger = Logger('StandaloneRegistrationBuilder');

  @override
  Map<String, List<String>> get buildExtensions => {
    r'$lib$': ['generated_registration.dart'],
  };

  @override
  Future<void> build(BuildStep buildStep) async {
    _logger.info('=== StandaloneRegistrationBuilder.build START ===');
    
    // Get all libraries from the current package
    final packageName = buildStep.inputId.package;
    final allLibraries = await buildStep.resolver.libraries.toList();
    
    _logger.info('Scanning package "$packageName" for DbRecord classes...');
    _logger.info('Found ${allLibraries.length} total libraries');

    final dbRecordClasses = <DbRecordClassInfo>[];
    var packageLibraryCount = 0;

    for (final library in allLibraries) {
      // Only process libraries from the current package
      if (library.identifier.startsWith('package:$packageName/')) {
        packageLibraryCount++;
        _logger.info('Processing package library #$packageLibraryCount: ${library.identifier}');
        
        for (final topLevelElement in library.children) {
          if (topLevelElement is ClassElement) {
            _logger.fine('Checking class: ${topLevelElement.name} in ${library.identifier}');
            
            if (_extendsDbRecord(topLevelElement)) {
              final name = topLevelElement.name;
              if (name != null) {
                _logger.info('Found DbRecord class: $name');
                
                // Extract the file path for import
                final libraryUri = library.identifier;
                final relativePath = libraryUri.replaceFirst('package:$packageName/', '');
                
                dbRecordClasses.add(DbRecordClassInfo(
                  className: name,
                  importPath: relativePath,
                ));
              }
            }
          }
        }
      }
    }

    _logger.info('Found ${dbRecordClasses.length} DbRecord classes total: ${dbRecordClasses.map((c) => c.className).join(', ')}');

    // Generate the registration file
    final content = _generateRegistrationFile(dbRecordClasses);
    
    // Write to generated_registration.dart  
    final outputId = AssetId(packageName, 'lib/generated_registration.dart');
    await buildStep.writeAsString(outputId, content);
    
    _logger.info('Generated registration file: ${outputId.path}');
  }

  /// Checks if a class extends DbRecord
  bool _extendsDbRecord(ClassElement element) {
    _logger.fine('Checking inheritance for class: ${element.name}');
    
    ClassElement? current = element;
    while (current != null) {
      _logger.fine('  Current class: ${current.name}');
      
      final supertype = current.supertype;
      if (supertype == null) {
        _logger.fine('  No supertype found, stopping');
        break;
      }
      
      final supertypeName = supertype.element.name;
      _logger.fine('  Supertype: $supertypeName');
      
      if (supertypeName == 'DbRecord') {
        _logger.fine('  Found DbRecord inheritance!');
        return true;
      }
      
      // Continue up the inheritance chain
      current = supertype.element as ClassElement?;
    }
    
    _logger.fine('  No DbRecord inheritance found');
    return false;
  }

  /// Generates the content of the registration file
  String _generateRegistrationFile(List<DbRecordClassInfo> classes) {
    final buffer = StringBuffer();
    
    // File header
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by declarative_sqlite_generator');
    buffer.writeln();
    
    // Core imports
    buffer.writeln("import 'package:declarative_sqlite/declarative_sqlite.dart';");
    buffer.writeln();
    
    // Import all DbRecord classes
    for (final classInfo in classes) {
      buffer.writeln("import '${classInfo.importPath}';");
    }
    buffer.writeln();
    
    // Generate the registration class
    buffer.writeln('/// Auto-generated registration for all DbRecord classes');
    buffer.writeln('class GeneratedRegistration {');
    buffer.writeln('  /// Registers all factory methods for DbRecord classes');
    buffer.writeln('  static void registerAllFactories() {');
    
    if (classes.isEmpty) {
      buffer.writeln('    // No DbRecord classes found to register');
    } else {
      for (final classInfo in classes) {
        buffer.writeln('    RecordMapFactoryRegistry.register<${classInfo.className}>(${classInfo.className}.fromMap);');
      }
    }
    
    buffer.writeln('  }');
    buffer.writeln('}');
    
    return buffer.toString();
  }
}

/// Information about a DbRecord class
class DbRecordClassInfo {
  final String className;
  final String importPath;

  DbRecordClassInfo({
    required this.className,
    required this.importPath,
  });
}