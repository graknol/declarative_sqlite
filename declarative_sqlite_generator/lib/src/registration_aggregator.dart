import 'dart:async';
import 'dart:convert';

import 'package:build/build.dart';
import 'package:logging/logging.dart';
import 'package:glob/glob.dart';

/// Aggregator that combines DbRecord metadata and generates the registration file
class RegistrationAggregator implements Builder {
  static final _logger = Logger('RegistrationAggregator');

  @override
  Map<String, List<String>> get buildExtensions => {
    r'$lib$': ['sqlite_factory_registration.dart'],
  };

  @override
  Future<void> build(BuildStep buildStep) async {
    _logger.info('=== RegistrationAggregator.build START ===');
    
    final packageName = buildStep.inputId.package;
    _logger.info('Aggregating DbRecord classes for package: $packageName');

    // Find all .dbrecord_meta files
    final metaFiles = await buildStep.findAssets(Glob('**/*.dbrecord_meta')).toList();
    _logger.info('Found ${metaFiles.length} metadata files');

    final allDbRecordClasses = <DbRecordClassInfo>[];
    
    for (final metaFile in metaFiles) {
      try {
        final metaContent = await buildStep.readAsString(metaFile);
        final metadata = jsonDecode(metaContent) as Map<String, dynamic>;
        
        final sourceFile = metadata['sourceFile'] as String;
        final classes = metadata['dbRecordClasses'] as List<dynamic>;
        
        _logger.info('Processing ${classes.length} classes from $sourceFile');
        
        for (final classData in classes) {
          final classMap = classData as Map<String, dynamic>;
          final className = classMap['className'] as String;
          final importPath = classMap['importPath'] as String;
          
          allDbRecordClasses.add(DbRecordClassInfo(
            className: className,
            importPath: importPath,
          ));
          
          _logger.info('  Found DbRecord class: $className (import: $importPath)');
        }
      } catch (e) {
        _logger.warning('Failed to process metadata file ${metaFile.path}: $e');
      }
    }

    _logger.info('Total DbRecord classes found: ${allDbRecordClasses.length}');

    // Generate the registration file
    final content = _generateRegistrationFile(allDbRecordClasses);
    
    // Write to sqlite_factory_registration.dart
    final outputId = AssetId(packageName, 'lib/sqlite_factory_registration.dart');
    await buildStep.writeAsString(outputId, content);
    
    _logger.info('Generated registration file: ${outputId.path}');
  }

  /// Generates the content of the registration file
  String _generateRegistrationFile(List<DbRecordClassInfo> classes) {
    final buffer = StringBuffer();
    
    // File header
    buffer.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
    buffer.writeln('// Generated by declarative_sqlite_generator');
    buffer.writeln();
    
    // Core imports
    buffer.writeln("import 'package:declarative_sqlite/declarative_sqlite.dart';");
    buffer.writeln();
    
    // Import all DbRecord classes
    final uniqueImports = classes.map((c) => c.importPath).toSet();
    for (final importPath in uniqueImports) {
      buffer.writeln("import '$importPath';");
    }
    buffer.writeln();
    
    // Generate the registration class
    buffer.writeln('/// Auto-generated registration for all DbRecord classes');
    buffer.writeln('class SqliteFactoryRegistration {');
    buffer.writeln('  /// Registers all factory methods for DbRecord classes');
    buffer.writeln('  static void registerAllFactories() {');
    
    if (classes.isEmpty) {
      buffer.writeln('    // No DbRecord classes found to register');
    } else {
      // Sort classes by name for consistent output
      final sortedClasses = List<DbRecordClassInfo>.from(classes);
      sortedClasses.sort((a, b) => a.className.compareTo(b.className));
      
      for (final classInfo in sortedClasses) {
        buffer.writeln('    RecordMapFactoryRegistry.register<${classInfo.className}>((data, db) => ${classInfo.className}(data, db));');
      }
    }
    
    buffer.writeln('  }');
    buffer.writeln('}');
    
    return buffer.toString();
  }
}

/// Information about a DbRecord class
class DbRecordClassInfo {
  final String className;
  final String importPath;

  DbRecordClassInfo({
    required this.className,
    required this.importPath,
  });
}